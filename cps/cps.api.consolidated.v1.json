{
  "openapi": "3.0.2",
  "info": {
    "title": "CPS API",
    "version": "1.0",
    "description": "CPS services API.",
    "contact": {
      "name": "CharIN e.V.",
      "url": "https://charin.global",
      "email": "coordination@charin.global"
    },
    "license": {
      "name": "Attribution-ShareAlike 4.0 International",
      "url": "https://creativecommons.org/licenses/by-sa/4.0/"
    }
  },
  "servers": [
    {
      "url": "https://api.server.test/opnc/v1/cps"
    }
  ],
  "tags": [],
  "paths": {
    "/contractData/sign": {
      "put": {
        "summary": "SignContractData",
        "operationId": "signContractDataV1",
        "description": "This interface signs contract data in the CPS and sends it back to the eMSP. By using the Parameter _PCID_ the Signed Contract Data are getting stored in the Contract Certificate Pool.",
        "tags": [
          "SignContractData"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/opncFromPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncFromPartyId.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyId.v1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/signContractDataReq.v1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signContractDataRes.v1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.v1"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contractData/generateandsign": {
      "put": {
        "summary": "GenerateAndSignContractData",
        "operationId": "generateAndSignContractDataV1",
        "description": "This service creates and signs contractData for provided contract information. The contract certificate will be signed by the eMSP SUB CA2 which is derived from the V2G Root CA\n\nThe created and signed contractData is stored in the contract certificate pool for provisioning to the OEM- and CPO-backend. \n\nTo update a contractData, the interface must be called again with the same PCID and EMAID. The system will replace the old contractData with the new one.",
        "tags": [
          "GenerateAndSignContractData"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/opncFromPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncFromPartyId.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyId.v1"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.v1"
                },
                "examples": {
                  "EMAID already used": {
                    "value": {
                      "errorMessages": [
                        "Invalid Tupple - EMAID is already used by other PCID."
                      ],
                      "traceId": "3e002e2a-580b-48e4-88a5-6b782cae636b"
                    }
                  },
                  "Invalid EMAID": {
                    "value": {
                      "errorMessages": [
                        "emaid : must match \"^[A-Za-z]{2}[-]?\\w{3}[-]?\\w{9,28}[-]?(\\w{1})?$\""
                      ],
                      "traceId": "57a24dd5-08e2-4d78-8a77-b49b9db411f2"
                    }
                  },
                  "Invalid PCID": {
                    "value": {
                      "errorMessages": [
                        "pcid : must match \"^[a-zA-Z0-9]{17,18}$\""
                      ],
                      "traceId": "a29a7734-0599-4394-9300-d912a6bfd914"
                    }
                  },
                  "Invalid Date": {
                    "value": {
                      "errorMessages": [
                        "The given contractEnds date is in the past."
                      ],
                      "traceId": "8185b433-8598-463e-a83f-9dbfea8a33e0"
                    }
                  },
                  "PCID not Available": {
                    "value": {
                      "errorMessages": [
                        "The OEM provisioning certificate with the given PCID is not available."
                      ],
                      "traceId": "fb683590-7de9-4c3e-ae41-a83ccb578628"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generateAndSignContractDataReq.v1"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/generateAndSignContractDataReq.v1"
              }
            }
          }
        }
      }
    },
    "/cpsCertificates": {
      "get": {
        "summary": "GetCpsCertificates",
        "operationId": "getCpsCertificatesV1",
        "description": "Get CPS certificates incl. certificate chain.",
        "tags": [
          "GetCpsCertificates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/opncFromPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncFromPartyId.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyType.v1"
          },
          {
            "$ref": "#/components/parameters/opncToPartyId.v1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCpsCertificatesRes.v1"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.v1"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.v1"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.v1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "opncFromPartyType.v1": {
        "name": "OPNC-from-party-type",
        "schema": {
          "type": "string",
          "enum": [
            "emsp",
            "cpo",
            "oem",
            "pki",
            "cps",
            "pcp",
            "ccp"
          ]
        },
        "in": "header",
        "description": "Specifies the type of party that originated this request",
        "required": false
      },
      "opncFromPartyId.v1": {
        "name": "OPNC-from-party-id",
        "schema": {
          "type": "string"
        },
        "in": "header",
        "description": "Specifies the ID of the party that originated this request. The ID format depends on the type of the party (WMI for OEM, ProviderID for EMSP, OperatorID for CPO, SHA-256 fingerprint of Root CA for PKI or CPS)",
        "required": false
      },
      "opncToPartyType.v1": {
        "name": "OPNC-to-party-type",
        "schema": {
          "type": "string",
          "enum": [
            "emsp",
            "cpo",
            "oem",
            "pki",
            "cps",
            "pcp",
            "ccp"
          ]
        },
        "in": "header",
        "description": "Specifies the type of party to which this request should be addressed.",
        "required": false
      },
      "opncToPartyId.v1": {
        "name": "OPNC-to-party-id",
        "schema": {
          "type": "string"
        },
        "in": "header",
        "description": "Specifies the party ID to which this request should be addressed. The ID format depends on the type of the party (WMI for OEM, ProviderID for EMSP, OperatorID for CPO, SHA-256 fingerprint of Root CA for PKI or CPS..)",
        "required": false
      }
    },
    "schemas": {
      "pcidParam.v1": {
        "title": "pcidParamV1",
        "description": "",
        "type": "string",
        "pattern": "^[a-zA-Z0-9]{17,18}$",
        "minLength": 17,
        "maxLength": 18
      },
      "emaidParam.v1": {
        "title": "emaidParamV1",
        "type": "string",
        "description": "E-Mobility Authentication Identifier (Note: separators will be normalized by the system due to ISO restrictions)",
        "pattern": "^[A-Za-z]{2}[-]?\\w{3}[-]?\\w{9,28}[-]?(\\w{1})?$",
        "minLength": 14,
        "maxLength": 36
      },
      "certificateChain.v1": {
        "title": "CertificateChainV1",
        "description": "General certificate chain type.",
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "Certificate in base64 encoded DER form",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "maxLength": 800
          },
          "subCa1Certificate": {
            "type": "string",
            "description": "SubCaCertificate in base64 encoded DER form",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "maxLength": 800
          },
          "subCa2Certificate": {
            "type": "string",
            "required": false,
            "description": "SubCaCertificate in base64 encoded DER form",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "maxLength": 800
          }
        }
      },
      "contractCertificateBundle.v1": {
        "title": "contractCertificateBundleV1",
        "description": "Contract certificate bundle consisting of the contract certificate and its chain not including the eMSP Root CA itself. Furthermore the encrypted contract private key and the DH Public Key as descirbed in the ISO 15118 is included ",
        "type": "object",
        "x-examples": {
          "example-1": {
            "contractCertificateChain": {
              "certificate": "MIIB+zCCAaGgAwIBAgIQayalVTpSmBQQpxCvOm/wVTAKBggqhkjOPQQDAjBDMQswCQYDVQQGEwJERTEVMBMGA1UEChMMSHViamVjdCBHbWJIMR0wGwYDVQQDExRNTyBTdWIyIENBIFFBIEcxLjIuMTAeFw0yNDA3MDQxNjEwNTlaFw0yNjA3MDExNDMyMDBaMDAxFTATBgNVBAoTDEh1YmplY3QgR21iSDEXMBUGA1UEAxMOREVJQ0VDT1BOQ0NFUlQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ16OPJzNDcXsmWi88Onr5lEDgs3TGhj/AhmTUfJUM3SWq+GX34hfaC/ZHuzt6n907QTCI2PUwBsysBMC+t2bWGo4GJMIGGMA8GA1UdEwEB/wQFMAMBAQAwEQYDVR0OBAoECEWCpUe1d7/dMBMGA1UdIwQMMAqACEUuaaE2ImxIMDsGCCsGAQUFBwEBBC8wLTArBggrBgEFBQcwAYYfaHR0cDovL29jc3AtcWEuaHViamVjdC5jb206ODA4MDAOBgNVHQ8BAf8EBAMCA+gwCgYIKoZIzj0EAwIDSAAwRQIhAPk8rji0H9sFcE/sCQsid18dRGV78vjAwkLVuPpPa/QBAiAyFzUS7SjsuFoARXuEi8HXfngnIUXfEngJ3/Q9c14UQw==",
              "subCa2Certificate": "MIICDzCCAbWgAwIBAgIQXd9CzQy8+VxpQt9IwNrOETAKBggqhkjOPQQDAjBBMQswCQYDVQQGEwJERTEVMBMGA1UEChMMSHViamVjdCBHbWJIMRswGQYDVQQDExJNTyBTdWIxIENBIFFBIEcxLjIwHhcNMjIwNDEwMjE1OTU5WhcNMzIwNDEwMjE1OTU5WjBDMQswCQYDVQQGEwJERTEVMBMGA1UEChMMSHViamVjdCBHbWJIMR0wGwYDVQQDExRNTyBTdWIyIENBIFFBIEcxLjIuMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGRsp5TTDIGpB+PEwmeG8D7Pgo/WN3U35Rxhe5ttLLlyF2jlmtOPHeHxWgGb0AO7H3L6nso0A7Nn2KfDP8tG+OujgYwwgYkwEgYDVR0TAQH/BAgwBgEB/wIBADARBgNVHQ4ECgQIRS5poTYibEgwEwYDVR0jBAwwCoAISw94EhgPO18wOwYIKwYBBQUHAQEELzAtMCsGCCsGAQUFBzABhh9odHRwOi8vb2NzcC1xYS5odWJqZWN0LmNvbTo4MDgwMA4GA1UdDwEB/wQEAwIBxjAKBggqhkjOPQQDAgNIADBFAiBqFxXTwnpm0eEgBPj/Px0kaEvZWdyZPm7BLJVJM6fT3QIhAKZPDhuau2DcN9xrrRPqqZLjfqPSMWw1D0VlCTqCuv2k",
              "subCa1Certificate": "MIICIjCCAcegAwIBAgIQIOuk+8fAbyXQizBVpSI55zAKBggqhkjOPQQDAjBVMQswCQYDVQQGEwJERTEVMBMGA1UEChMMSHViamVjdCBHbWJIMRMwEQYKCZImiZPyLGQBGRYDVjJHMRowGAYDVQQDExFWMkcgUm9vdCBDQSBRQSBHMTAeFw0yMjA0MDcxNDEzMDdaFw00MjA0MDcxNDEzMDdaMEExCzAJBgNVBAYTAkRFMRUwEwYDVQQKEwxIdWJqZWN0IEdtYkgxGzAZBgNVBAMTEk1PIFN1YjEgQ0EgUUEgRzEuMjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLWnWSw4NPNInduDQp6H0IFgeY0WtO0F3utqV191XLIespoAoSIz7s4Vhf+BhbbeX+UyftbGDp2m9EjGIBhog+mjgYwwgYkwEgYDVR0TAQH/BAgwBgEB/wIBATARBgNVHQ4ECgQISw94EhgPO18wEwYDVR0jBAwwCoAIS0X/giX8EJYwOwYIKwYBBQUHAQEELzAtMCsGCCsGAQUFBzABhh9odHRwOi8vb2NzcC1xYS5odWJqZWN0LmNvbTo4MDgwMA4GA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAgNJADBGAiEAsApDKLvPUVuDCtsIAnn/+prsGu5aekwd59tLiCHAFwACIQCFGJHvTz7JUrq/QJhQzehduW/+oaROsqOp8L3JdEO6XA==",
              "contractSignatureEncryptedPrivateKey": "mml5MzFw7wW1e+eKJcM7Ru8mGo0IBn9qE15AzUEf59Q3ycJ4mQzlTgaWpvODL4OG",
              "dHpublickey": "BDWTBFwyqhV5lfyOaSoHlKAkIZIntQ4Qvo/6yRBZXX+UgAcAP1LoVnBKUTR3GYJ7qJ+Y0PN4vdGuYdKTG5N9HmU="
            }
          }
        },
        "properties": {
          "pcid": {
            "$ref": "#/components/schemas/pcidParam.v1"
          },
          "emaid": {
            "$ref": "#/components/schemas/emaidParam.v1"
          },
          "contractCertificateChain": {
            "$ref": "#/components/schemas/certificateChain.v1"
          },
          "contractSignatureEncryptedPrivateKey": {
            "type": "string",
            "minLength": 1,
            "description": "Encryted contract certificate private key"
          },
          "dHpublickey": {
            "type": "string",
            "minLength": 1,
            "description": "DH Public Key as defined in the ISO15118"
          }
        },
        "required": [
          "pcid",
          "emaid",
          "contractCertificateChain",
          "contractSignatureEncryptedPrivateKey",
          "dHpublickey"
        ]
      },
      "xsdMsgDefNamespaceParam.v1": {
        "title": "xsdMsgDefNamespaceParamV1",
        "description": "ISO15118 Version",
        "type": "string",
        "default": "urn:iso:15118:2:2013:MsgDef",
        "enum": [
          "urn:iso:15118:2:2013:MsgDef",
          "urn:iso:15118:20:2020:MsgDef"
        ]
      },
      "cpsV2GRootCertificateFingerprintParam.v1": {
        "title": "cpsV2GRootCertificateFingerprintParamV1",
        "description": "The SHA256 Fingerprint of the desired V2G root CA which shall was used to sign these data with the regarding CPS signing certificate. Its optional. If not given, the CPS will decide which CPS signing V2G PKI will be renurned\n",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{64}$",
        "example": "311f28ff13da6d75f836ac10644b34273da99564c600a191fb3737d50562a4f1"
      },
      "signContractDataReq.v1": {
        "title": "SignContractDataRequestV1",
        "description": "",
        "type": "object",
        "properties": {
          "contractCertificateBundle": {
            "$ref": "#/components/schemas/contractCertificateBundle.v1"
          },
          "xsdMsgDefNamespace": {
            "$ref": "#/components/schemas/xsdMsgDefNamespaceParam.v1"
          },
          "cpsV2GRootCertificateFingerprint": {
            "$ref": "#/components/schemas/cpsV2GRootCertificateFingerprintParam.v1"
          }
        },
        "required": [
          "contractCertificateBundle",
          "xsdMsgDefNamespace"
        ]
      },
      "signedContractData.v1": {
        "title": "SignedContractDataV1",
        "description": "",
        "type": "object",
        "properties": {
          "certificateInstallationRes": {
            "type": "string",
            "description": "Base64 encoded EXI - Contract installation response as defined in the ISO15118 standard",
            "example": "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"
          },
          "emaid": {
            "$ref": "#/components/schemas/emaidParam.v1"
          },
          "pcid": {
            "$ref": "#/components/schemas/pcidParam.v1"
          },
          "xsdMsgDefNamespace": {
            "$ref": "#/components/schemas/xsdMsgDefNamespaceParam.v1"
          },
          "metaData": {
            "type": "string",
            "description": "placeholder for future applications"
          },
          "cpsV2GRootCertificateFingerprint": {
            "$ref": "#/components/schemas/cpsV2GRootCertificateFingerprintParam.v1"
          },
          "cpsRootDistinguishedName": {
            "type": "string",
            "example": "CN=V2G Root CA G2, DC=V2G, O=Hubject GmbH, C=DE",
            "pattern": "^(CN=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(DC=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(O=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(OU=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(C=[A-Z]{2})?$",
            "description": "Reflects the V2G root distinguished name field. (informative)"
          }
        },
        "required": [
          "emaid",
          "pcid",
          "certificateInstallationRes",
          "xsdMsgDefNamespace"
        ]
      },
      "signContractDataRes.v1": {
        "title": "SignContractDataResV1",
        "type": "object",
        "properties": {
          "signedContractData": {
            "$ref": "#/components/schemas/signedContractData.v1"
          }
        }
      },
      "error.v1": {
        "title": "ErrorV1",
        "description": "",
        "type": "object",
        "properties": {
          "errorMessages": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "traceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "emspRootCertificateFingerprintParam.v1": {
        "title": "emspRootCertificateFingerprintParamV1",
        "description": "The SHA256 Fingerprint of the desired eMSP root CA from which the CC will derive. It is optional. If not given, the PKI service operator will decide from which eMSP Root CA the issued CC will derive\n",
        "type": "string",
        "pattern": "^[0-9a-fA-F]{64}$",
        "example": "311f28ff13da6d75f836ac10644b34273da99564c600a191fb3737d50562a4f1"
      },
      "generateAndSignContractDataReq.v1": {
        "title": "GenerateAndSignContractDataReqV1",
        "type": "object",
        "description": "",
        "x-examples": {
          "example": {
            "contractBegins": "2021-05-11T00:00:00Z",
            "contractEnds": "2022-12-10T11:42:59Z",
            "pcid": "",
            "emaid": "",
            "xsdMsgDefNamespace": "urn:iso:15118:2:2013:MsgDef"
          }
        },
        "properties": {
          "contractBegins": {
            "type": "string",
            "description": "Timestamp the contract will begin at.",
            "x-constraint": "@ValidDateTime",
            "x-constraint-message": "The contractBegins does not match the specification"
          },
          "contractEnds": {
            "type": "string",
            "description": "Timestamp until the contract is active.",
            "x-constraint": "@ValidDateTime",
            "x-constraint-message": "The contractEnds does not match the specification"
          },
          "emaid": {
            "$ref": "#/components/schemas/emaidParam.v1"
          },
          "pcid": {
            "$ref": "#/components/schemas/pcidParam.v1"
          },
          "xsdMsgDefNamespace": {
            "$ref": "#/components/schemas/xsdMsgDefNamespaceParam.v1"
          },
          "subscriptionUrl": {
            "type": "string",
            "example": "https://testemsp.com/subscriptions/v2g",
            "pattern": "^(https?|http)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]",
            "description": "URL which could be given by eMSP to allow extended information exchange for a given contract"
          },
          "cpsV2GRootCertificateFingerprint": {
            "$ref": "#/components/schemas/cpsV2GRootCertificateFingerprintParam.v1"
          },
          "moRootCertificateFingerprint": {
            "$ref": "#/components/schemas/emspRootCertificateFingerprintParam.v1"
          },
          "metaData": {
            "type": "string",
            "description": "Placeholder for future adaption"
          }
        },
        "required": [
          "contractBegins",
          "contractEnds",
          "emaid",
          "pcid",
          "xsdMsgDefNamespace"
        ]
      },
      "cpsCertificateChainData.v1": {
        "title": "CpsCertificateChainDataV1",
        "description": "CPS certificate chain data type.",
        "type": "object",
        "properties": {
          "cpsDistinguishedName": {
            "type": "string",
            "minLength": 1,
            "example": "DC=CPS,CN=CPS 2022.2 QA,O=Hubject GmbH,C=EU",
            "description": "Reflects the cps certificate distinguished name field. (informative)"
          },
          "cpsCertificateChain": {
            "$ref": "#/components/schemas/certificateChain.v1"
          },
          "validFrom": {
            "type": "string",
            "description": "Reflects the subjects not before date. (infotmative)",
            "format": "date-time",
            "example": "2022-02-08T21:59:59Z"
          },
          "validTo": {
            "type": "string",
            "description": "Reflects the subjects not after date. (infotmative)",
            "example": "2022-02-08T21:59:59Z",
            "format": "date-time"
          },
          "organizationName": {
            "type": "string",
            "minLength": 1,
            "example": "Hubject GmbH",
            "description": "Reflects the subjects organization name value. (informative)"
          },
          "cpsV2GRootCertificateFingerprint": {
            "$ref": "#/components/schemas/cpsV2GRootCertificateFingerprintParam.v1"
          },
          "cpsV2GRootDistinguishedName": {
            "type": "string",
            "example": "CN=V2G Root CA G2, DC=V2G, O=Hubject GmbH, C=DE",
            "pattern": "^(CN=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(DC=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(O=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(OU=[a-zA-Z0-9\\s\\-\\.]+,\\s)?(C=[A-Z]{2})?$",
            "description": "Reflects the v2g root distinguished name field. (informative)"
          },
          "xsdMsgDefNamespace": {
            "$ref": "#/components/schemas/xsdMsgDefNamespaceParam.v1"
          }
        },
        "required": [
          "cpsDistinguishedName",
          "cpsCertificateChain",
          "validFrom",
          "validTo",
          "organizationName",
          "cpsV2GRootCertificateFingerprint",
          "cpsV2GRootDistinguishedName",
          "xsdMsgDefNamespace"
        ]
      },
      "getCpsCertificatesRes.v1": {
        "title": "GetCpsCertificatesResponseV1",
        "description": "",
        "type": "object",
        "x-examples": {
          "example-1": {
            "cpsCertificateDataCollection": [
              {
                "cpsCertificateChain": {
                  "certificate": "",
                  "subCa2Certificate": "",
                  "subCa1Certificate": ""
                },
                "cpsDistinguishedName": "",
                "cpsRootDistinguishedName": "",
                "cpsCertificate": "",
                "validFrom": "2022-02-08T21:59:59Z",
                "validTo": "2022-05-08T21:59:59Z",
                "organizationName": "",
                "cpsRootCertificateId": ""
              }
            ]
          }
        },
        "properties": {
          "cpsCertificateDataCollection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cpsCertificateChainData.v1"
            }
          }
        }
      }
    }
  }
}